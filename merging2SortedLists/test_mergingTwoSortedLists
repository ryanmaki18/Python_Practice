from mergingTwoSortedLists import Solution
import unittest

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class MergingTwoSortedLists(unittest.TestCase):
    # Recursively checks if the lists being compared are equal or not
    def are_linked_lists_equal(self, list1, list2):
        if list1 is None and list2 is None:
            return True
        if list1 is None or list2 is None:
            return False
        return list1.val == list2.val and self.are_linked_lists_equal(list1.next, list2.next)
    
    def test_example_1(self):
        solution = Solution()
        list1 = ListNode(1, ListNode(2, ListNode(4)))
        list2 = ListNode(1, ListNode(3, ListNode(4)))
        correct = ListNode(1, ListNode(1, ListNode(2, ListNode(3, ListNode(4, ListNode(4))))))
        self.assertTrue(self.are_linked_lists_equal(solution.mergeTwoLists(list1, list2), correct))
        
    def test_example_empty(self):
        solution = Solution()
        list1 = None
        list2 = None
        correct = None
        self.assertTrue(self.are_linked_lists_equal(solution.mergeTwoLists(list1, list2), correct))
        
    def test_example_singleElement(self):
        solution = Solution()
        list1 = None
        list2 = ListNode(0)
        correct = ListNode(0)
        self.assertTrue(self.are_linked_lists_equal(solution.mergeTwoLists(list1, list2), correct))

if __name__ == '__main__':
    unittest.main()
    